package compilations;


/**
* compilations/GameServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameService.idl
* Saturday, May 24, 2025 4:10:05 PM PST
*/

public abstract class GameServicePOA extends org.omg.PortableServer.Servant
 implements GameServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("requestToJoinGame", new Integer (0));
    _methods.put ("getCurrentWordMask", new Integer (1));
    _methods.put ("submitLetterGuess", new Integer (2));
    _methods.put ("getRemainingGuesses", new Integer (3));
    _methods.put ("getGameProgressStatus", new Integer (4));
    _methods.put ("setPlayerDone", new Integer (5));
    _methods.put ("getCurrentPlayerCount", new Integer (6));
    _methods.put ("getAllPlayers", new Integer (7));
    _methods.put ("areAllPlayersDone", new Integer (8));
    _methods.put ("advanceToNextRoundIfReady", new Integer (9));
    _methods.put ("getAllPlayerScores", new Integer (10));
    _methods.put ("getCurrentRound", new Integer (11));
    _methods.put ("isGameOver", new Integer (12));
    _methods.put ("getWinner", new Integer (13));
    _methods.put ("getScoreSummary", new Integer (14));
    _methods.put ("createGameSession", new Integer (15));
    _methods.put ("createGameDetails", new Integer (16));
    _methods.put ("createRound", new Integer (17));
    _methods.put ("updateGame", new Integer (18));
    _methods.put ("updateRound", new Integer (19));
    _methods.put ("readRoundWord", new Integer (20));
    _methods.put ("deleteGameSession", new Integer (21));
    _methods.put ("getRoundId", new Integer (22));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // compilations/GameService/requestToJoinGame
       {
         try {
           String username = in.read_string ();
           this.requestToJoinGame (username);
           out = $rh.createReply();
         } catch (NoOpponentFoundException $ex) {
           out = $rh.createExceptionReply ();
           NoOpponentFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // compilations/GameService/getCurrentWordMask
       {
         try {
           String username = in.read_string ();
           WordMaskInfo $result = null;
           $result = this.getCurrentWordMask (username);
           out = $rh.createReply();
           WordMaskInfoHelper.write (out, $result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // compilations/GameService/submitLetterGuess
       {
         try {
           String username = in.read_string ();
           char letter = in.read_char ();
           this.submitLetterGuess (username, letter);
           out = $rh.createReply();
         } catch (InvalidGuessException $ex) {
           out = $rh.createExceptionReply ();
           InvalidGuessExceptionHelper.write (out, $ex);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // compilations/GameService/getRemainingGuesses
       {
         try {
           String username = in.read_string ();
           short $result = (short)0;
           $result = this.getRemainingGuesses (username);
           out = $rh.createReply();
           out.write_short ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // compilations/GameService/getGameProgressStatus
       {
         try {
           String username = in.read_string ();
           String $result = null;
           $result = this.getGameProgressStatus (username);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // compilations/GameService/setPlayerDone
       {
         try {
           String username = in.read_string ();
           short round = in.read_short ();
           boolean guessedCorrectly = in.read_boolean ();
           this.setPlayerDone (username, round, guessedCorrectly);
           out = $rh.createReply();
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // compilations/GameService/getCurrentPlayerCount
       {
         short $result = (short)0;
         $result = this.getCurrentPlayerCount ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 7:  // compilations/GameService/getAllPlayers
       {
         try {
           String $result[] = null;
           $result = this.getAllPlayers ();
           out = $rh.createReply();
           StringSequenceHelper.write (out, $result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // compilations/GameService/areAllPlayersDone
       {
         try {
           String username = in.read_string ();
           short round = in.read_short ();
           boolean $result = false;
           $result = this.areAllPlayersDone (username, round);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // compilations/GameService/advanceToNextRoundIfReady
       {
         try {
           String username = in.read_string ();
           short round = in.read_short ();
           boolean $result = false;
           $result = this.advanceToNextRoundIfReady (username, round);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 10:  // compilations/GameService/getAllPlayerScores
       {
         PlayerScore $result[] = null;
         $result = this.getAllPlayerScores ();
         out = $rh.createReply();
         GamePlayerScoreSequenceHelper.write (out, $result);
         break;
       }

       case 11:  // compilations/GameService/getCurrentRound
       {
         try {
           String gameId = in.read_string ();
           short $result = (short)0;
           $result = this.getCurrentRound (gameId);
           out = $rh.createReply();
           out.write_short ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 12:  // compilations/GameService/isGameOver
       {
         boolean $result = false;
         $result = this.isGameOver ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 13:  // compilations/GameService/getWinner
       {
         String $result = null;
         $result = this.getWinner ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 14:  // compilations/GameService/getScoreSummary
       {
         String $result = null;
         $result = this.getScoreSummary ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //NEW UPDATE NG IDL NATIN -jas
       case 15:  // compilations/GameService/createGameSession
       {
         this.createGameSession ();
         out = $rh.createReply();
         break;
       }

       case 16:  // compilations/GameService/createGameDetails
       {
         try {
           this.createGameDetails ();
           out = $rh.createReply();
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 17:  // compilations/GameService/createRound
       {
         try {
           String gameId = in.read_string ();
           this.createRound (gameId);
           out = $rh.createReply();
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 18:  // compilations/GameService/updateGame
       {
         try {
           String status = in.read_string ();
           this.updateGame (status);
           out = $rh.createReply();
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 19:  // compilations/GameService/updateRound
       {
         try {
           String status = in.read_string ();
           this.updateRound (status);
           out = $rh.createReply();
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 20:  // compilations/GameService/readRoundWord
       {
         try {
           String $result = null;
           $result = this.readRoundWord ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 21:  // compilations/GameService/deleteGameSession
       {
         try {
           this.deleteGameSession ();
           out = $rh.createReply();
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 22:  // compilations/GameService/getRoundId
       {
         try {
           String gameId = in.read_string ();
           String $result = null;
           $result = this.getRoundId (gameId);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:compilations/GameService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public GameService _this() 
  {
    return GameServiceHelper.narrow(
    super._this_object());
  }

  public GameService _this(org.omg.CORBA.ORB orb) 
  {
    return GameServiceHelper.narrow(
    super._this_object(orb));
  }


} // class GameServicePOA
