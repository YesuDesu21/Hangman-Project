package compilations;


/**
* compilations/AdminServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AdminService.idl
* Saturday, May 24, 2025 4:21:25 PM PST
*/

public abstract class AdminServicePOA extends org.omg.PortableServer.Servant
 implements AdminServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createPlayerAccount", new Integer (0));
    _methods.put ("removePlayerAccount", new Integer (1));
    _methods.put ("updatePlayerCredentials", new Integer (2));
    _methods.put ("searchPlayerAccounts", new Integer (3));
    _methods.put ("updateGameWaitTime", new Integer (4));
    _methods.put ("updateRoundDuration", new Integer (5));
    _methods.put ("getJoinTimeout", new Integer (6));
    _methods.put ("getRoundDuration", new Integer (7));
    _methods.put ("getGameHistory", new Integer (8));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // compilations/AdminService/createPlayerAccount
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           this.createPlayerAccount (username, password);
           out = $rh.createReply();
         } catch (PlayerAlreadyExistsException $ex) {
           out = $rh.createExceptionReply ();
           PlayerAlreadyExistsExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // compilations/AdminService/removePlayerAccount
       {
         try {
           String username = in.read_string ();
           this.removePlayerAccount (username);
           out = $rh.createReply();
         } catch (PlayerNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           PlayerNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // compilations/AdminService/updatePlayerCredentials
       {
         try {
           String currentUsername = in.read_string ();
           String newUsername = in.read_string ();
           String newPassword = in.read_string ();
           this.updatePlayerCredentials (currentUsername, newUsername, newPassword);
           out = $rh.createReply();
         } catch (PlayerNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           PlayerNotFoundExceptionHelper.write (out, $ex);
         } catch (PlayerAlreadyExistsException $ex) {
           out = $rh.createExceptionReply ();
           PlayerAlreadyExistsExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // compilations/AdminService/searchPlayerAccounts
       {
         String keyword = in.read_string ();
         PlayerAccount $result[] = null;
         $result = this.searchPlayerAccounts (keyword);
         out = $rh.createReply();
         PlayerAccountSeqHelper.write (out, $result);
         break;
       }

       case 4:  // compilations/AdminService/updateGameWaitTime
       {
         short seconds = in.read_short ();
         this.updateGameWaitTime (seconds);
         out = $rh.createReply();
         break;
       }

       case 5:  // compilations/AdminService/updateRoundDuration
       {
         short seconds = in.read_short ();
         this.updateRoundDuration (seconds);
         out = $rh.createReply();
         break;
       }

       case 6:  // compilations/AdminService/getJoinTimeout
       {
         short $result = (short)0;
         $result = this.getJoinTimeout ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 7:  // compilations/AdminService/getRoundDuration
       {
         short $result = (short)0;
         $result = this.getRoundDuration ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 8:  // compilations/AdminService/getGameHistory
       {
         GameSessionObject $result[] = null;
         $result = this.getGameHistory ();
         out = $rh.createReply();
         GameSessionSequenceHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:compilations/AdminService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AdminService _this() 
  {
    return AdminServiceHelper.narrow(
    super._this_object());
  }

  public AdminService _this(org.omg.CORBA.ORB orb) 
  {
    return AdminServiceHelper.narrow(
    super._this_object(orb));
  }


} // class AdminServicePOA
