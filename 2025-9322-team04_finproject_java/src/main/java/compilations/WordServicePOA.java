package compilations;


import compilations.WordServicePackage.GameNotFoundException;
import compilations.WordServicePackage.GameNotFoundExceptionHelper;

/**
* compilations/WordServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from WordService.idl
* Saturday, May 24, 2025 4:10:34 PM PST
*/

public abstract class WordServicePOA extends org.omg.PortableServer.Servant
 implements WordServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getNewWord", new Integer (0));
    _methods.put ("markWordAsUsed", new Integer (1));
    _methods.put ("getCurrentWord", new Integer (2));
    _methods.put ("clearCurrentWord", new Integer (3));
    _methods.put ("getRoundWord", new Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // compilations/WordService/getNewWord
       {
         String gameId = in.read_string ();
         String $result = null;
         $result = this.getNewWord (gameId);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // compilations/WordService/markWordAsUsed
       {
         String word = in.read_string ();
         String gameId = in.read_string ();
         this.markWordAsUsed (word, gameId);
         out = $rh.createReply();
         break;
       }

       case 2:  // compilations/WordService/getCurrentWord
       {
         String gameId = in.read_string ();
         String $result = null;
         $result = this.getCurrentWord (gameId);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // compilations/WordService/clearCurrentWord
       {
         String gameId = in.read_string ();
         this.clearCurrentWord (gameId);
         out = $rh.createReply();
         break;
       }


  //NEW METHOD BELOW-JAS
       case 4:  // compilations/WordService/getRoundWord
       {
         try {
           String gameid = in.read_string ();
           String roundid = in.read_string ();
           String $result = null;
           $result = this.getRoundWord (gameid, roundid);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           GameNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:compilations/WordService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public WordService _this() 
  {
    return WordServiceHelper.narrow(
    super._this_object());
  }

  public WordService _this(org.omg.CORBA.ORB orb) 
  {
    return WordServiceHelper.narrow(
    super._this_object(orb));
  }


} // class WordServicePOA
