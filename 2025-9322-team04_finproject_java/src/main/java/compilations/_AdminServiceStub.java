package compilations;


/**
* compilations/_AdminServiceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AdminService.idl
* Saturday, May 24, 2025 4:21:25 PM PST
*/

public class _AdminServiceStub extends org.omg.CORBA.portable.ObjectImpl implements AdminService
{

  public void createPlayerAccount (String username, String password) throws PlayerAlreadyExistsException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createPlayerAccount", true);
                $out.write_string (username);
                $out.write_string (password);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:compilations/PlayerAlreadyExistsException:1.0"))
                    throw PlayerAlreadyExistsExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createPlayerAccount (username, password        );
            } finally {
                _releaseReply ($in);
            }
  } // createPlayerAccount

  public void removePlayerAccount (String username) throws PlayerNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("removePlayerAccount", true);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:compilations/PlayerNotFoundException:1.0"))
                    throw PlayerNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                removePlayerAccount (username        );
            } finally {
                _releaseReply ($in);
            }
  } // removePlayerAccount

  public void updatePlayerCredentials (String currentUsername, String newUsername, String newPassword) throws PlayerNotFoundException, PlayerAlreadyExistsException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updatePlayerCredentials", true);
                $out.write_string (currentUsername);
                $out.write_string (newUsername);
                $out.write_string (newPassword);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:compilations/PlayerNotFoundException:1.0"))
                    throw PlayerNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:compilations/PlayerAlreadyExistsException:1.0"))
                    throw PlayerAlreadyExistsExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updatePlayerCredentials (currentUsername, newUsername, newPassword        );
            } finally {
                _releaseReply ($in);
            }
  } // updatePlayerCredentials

  public PlayerAccount[] searchPlayerAccounts (String keyword)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("searchPlayerAccounts", true);
                $out.write_string (keyword);
                $in = _invoke ($out);
                PlayerAccount $result[] = PlayerAccountSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return searchPlayerAccounts (keyword        );
            } finally {
                _releaseReply ($in);
            }
  } // searchPlayerAccounts

  public void updateGameWaitTime (short seconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateGameWaitTime", true);
                $out.write_short (seconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateGameWaitTime (seconds        );
            } finally {
                _releaseReply ($in);
            }
  } // updateGameWaitTime

  public void updateRoundDuration (short seconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateRoundDuration", true);
                $out.write_short (seconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateRoundDuration (seconds        );
            } finally {
                _releaseReply ($in);
            }
  } // updateRoundDuration

  public short getJoinTimeout ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getJoinTimeout", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getJoinTimeout (        );
            } finally {
                _releaseReply ($in);
            }
  } // getJoinTimeout

  public short getRoundDuration ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRoundDuration", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getRoundDuration (        );
            } finally {
                _releaseReply ($in);
            }
  } // getRoundDuration

  public GameSessionObject[] getGameHistory ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getGameHistory", true);
                $in = _invoke ($out);
                GameSessionObject $result[] = GameSessionSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getGameHistory (        );
            } finally {
                _releaseReply ($in);
            }
  } // getGameHistory

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:compilations/AdminService:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "compilations._AdminServiceStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _AdminServiceStub
