# Python stubs generated by omniidl from GameService.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "compilations"
#
__name__ = "compilations"
_0_compilations = omniORB.openModule("compilations", r"GameService.idl")
_0_compilations__POA = omniORB.openModule("compilations__POA", r"GameService.idl")


# exception NoOpponentFoundException
_0_compilations.NoOpponentFoundException = omniORB.newEmptyClass()
class NoOpponentFoundException (CORBA.UserException):
    _NP_RepositoryId = "IDL:compilations/NoOpponentFoundException:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_compilations.NoOpponentFoundException = NoOpponentFoundException
_0_compilations._d_NoOpponentFoundException  = (omniORB.tcInternal.tv_except, NoOpponentFoundException, NoOpponentFoundException._NP_RepositoryId, "NoOpponentFoundException")
_0_compilations._tc_NoOpponentFoundException = omniORB.tcInternal.createTypeCode(_0_compilations._d_NoOpponentFoundException)
omniORB.registerType(NoOpponentFoundException._NP_RepositoryId, _0_compilations._d_NoOpponentFoundException, _0_compilations._tc_NoOpponentFoundException)
del NoOpponentFoundException

# exception InvalidGuessException
_0_compilations.InvalidGuessException = omniORB.newEmptyClass()
class InvalidGuessException (CORBA.UserException):
    _NP_RepositoryId = "IDL:compilations/InvalidGuessException:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_compilations.InvalidGuessException = InvalidGuessException
_0_compilations._d_InvalidGuessException  = (omniORB.tcInternal.tv_except, InvalidGuessException, InvalidGuessException._NP_RepositoryId, "InvalidGuessException")
_0_compilations._tc_InvalidGuessException = omniORB.tcInternal.createTypeCode(_0_compilations._d_InvalidGuessException)
omniORB.registerType(InvalidGuessException._NP_RepositoryId, _0_compilations._d_InvalidGuessException, _0_compilations._tc_InvalidGuessException)
del InvalidGuessException

# exception GameNotFoundException
_0_compilations.GameNotFoundException = omniORB.newEmptyClass()
class GameNotFoundException (CORBA.UserException):
    _NP_RepositoryId = "IDL:compilations/GameNotFoundException:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_compilations.GameNotFoundException = GameNotFoundException
_0_compilations._d_GameNotFoundException  = (omniORB.tcInternal.tv_except, GameNotFoundException, GameNotFoundException._NP_RepositoryId, "GameNotFoundException")
_0_compilations._tc_GameNotFoundException = omniORB.tcInternal.createTypeCode(_0_compilations._d_GameNotFoundException)
omniORB.registerType(GameNotFoundException._NP_RepositoryId, _0_compilations._d_GameNotFoundException, _0_compilations._tc_GameNotFoundException)
del GameNotFoundException

# struct WordMaskInfo
_0_compilations.WordMaskInfo = omniORB.newEmptyClass()
class WordMaskInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:compilations/WordMaskInfo:1.0"

    def __init__(self, maskedWord, actualWord, remainingGuesses, gameId):
        self.maskedWord = maskedWord
        self.actualWord = actualWord
        self.remainingGuesses = remainingGuesses
        self.gameId = gameId

_0_compilations.WordMaskInfo = WordMaskInfo
_0_compilations._d_WordMaskInfo  = (omniORB.tcInternal.tv_struct, WordMaskInfo, WordMaskInfo._NP_RepositoryId, "WordMaskInfo", "maskedWord", (omniORB.tcInternal.tv_string,0), "actualWord", (omniORB.tcInternal.tv_string,0), "remainingGuesses", omniORB.tcInternal.tv_short, "gameId", (omniORB.tcInternal.tv_string,0))
_0_compilations._tc_WordMaskInfo = omniORB.tcInternal.createTypeCode(_0_compilations._d_WordMaskInfo)
omniORB.registerType(WordMaskInfo._NP_RepositoryId, _0_compilations._d_WordMaskInfo, _0_compilations._tc_WordMaskInfo)
del WordMaskInfo

# typedef ... StringSequence
class StringSequence:
    _NP_RepositoryId = "IDL:compilations/StringSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_compilations.StringSequence = StringSequence
_0_compilations._d_StringSequence  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_compilations._ad_StringSequence = (omniORB.tcInternal.tv_alias, StringSequence._NP_RepositoryId, "StringSequence", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_compilations._tc_StringSequence = omniORB.tcInternal.createTypeCode(_0_compilations._ad_StringSequence)
omniORB.registerType(StringSequence._NP_RepositoryId, _0_compilations._ad_StringSequence, _0_compilations._tc_StringSequence)
del StringSequence

# struct PlayerScore
_0_compilations.PlayerScore = omniORB.newEmptyClass()
class PlayerScore (omniORB.StructBase):
    _NP_RepositoryId = "IDL:compilations/PlayerScore:1.0"

    def __init__(self, username, gamesWon):
        self.username = username
        self.gamesWon = gamesWon

_0_compilations.PlayerScore = PlayerScore
_0_compilations._d_PlayerScore  = (omniORB.tcInternal.tv_struct, PlayerScore, PlayerScore._NP_RepositoryId, "PlayerScore", "username", (omniORB.tcInternal.tv_string,0), "gamesWon", omniORB.tcInternal.tv_short)
_0_compilations._tc_PlayerScore = omniORB.tcInternal.createTypeCode(_0_compilations._d_PlayerScore)
omniORB.registerType(PlayerScore._NP_RepositoryId, _0_compilations._d_PlayerScore, _0_compilations._tc_PlayerScore)
del PlayerScore

# typedef ... GamePlayerScoreSequence
class GamePlayerScoreSequence:
    _NP_RepositoryId = "IDL:compilations/GamePlayerScoreSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_compilations.GamePlayerScoreSequence = GamePlayerScoreSequence
_0_compilations._d_GamePlayerScoreSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:compilations/PlayerScore:1.0"], 0)
_0_compilations._ad_GamePlayerScoreSequence = (omniORB.tcInternal.tv_alias, GamePlayerScoreSequence._NP_RepositoryId, "GamePlayerScoreSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:compilations/PlayerScore:1.0"], 0))
_0_compilations._tc_GamePlayerScoreSequence = omniORB.tcInternal.createTypeCode(_0_compilations._ad_GamePlayerScoreSequence)
omniORB.registerType(GamePlayerScoreSequence._NP_RepositoryId, _0_compilations._ad_GamePlayerScoreSequence, _0_compilations._tc_GamePlayerScoreSequence)
del GamePlayerScoreSequence

# interface GameService
_0_compilations._d_GameService = (omniORB.tcInternal.tv_objref, "IDL:compilations/GameService:1.0", "GameService")
omniORB.typeMapping["IDL:compilations/GameService:1.0"] = _0_compilations._d_GameService
_0_compilations.GameService = omniORB.newEmptyClass()
class GameService :
    _NP_RepositoryId = _0_compilations._d_GameService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_compilations.GameService = GameService
_0_compilations._tc_GameService = omniORB.tcInternal.createTypeCode(_0_compilations._d_GameService)
omniORB.registerType(GameService._NP_RepositoryId, _0_compilations._d_GameService, _0_compilations._tc_GameService)

# GameService operations and attributes
GameService._d_requestToJoinGame = (((omniORB.tcInternal.tv_string,0), ), (), {_0_compilations.NoOpponentFoundException._NP_RepositoryId: _0_compilations._d_NoOpponentFoundException})
GameService._d_getCurrentWordMask = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:compilations/WordMaskInfo:1.0"], ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_submitLetterGuess = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_char), (), {_0_compilations.InvalidGuessException._NP_RepositoryId: _0_compilations._d_InvalidGuessException, _0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_getRemainingGuesses = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_short, ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_getGameProgressStatus = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_setPlayerDone = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_short, omniORB.tcInternal.tv_boolean), (), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_getCurrentPlayerCount = ((), (omniORB.tcInternal.tv_short, ), None)
GameService._d_getAllPlayers = ((), (omniORB.typeMapping["IDL:compilations/StringSequence:1.0"], ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_areAllPlayersDone = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_short), (omniORB.tcInternal.tv_boolean, ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_advanceToNextRoundIfReady = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_short), (omniORB.tcInternal.tv_boolean, ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_getAllPlayerScores = ((), (omniORB.typeMapping["IDL:compilations/GamePlayerScoreSequence:1.0"], ), None)
GameService._d_getCurrentRound = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_short, ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_isGameOver = ((), (omniORB.tcInternal.tv_boolean, ), None)
GameService._d_getWinner = ((), ((omniORB.tcInternal.tv_string,0), ), None)
GameService._d_getScoreSummary = ((), ((omniORB.tcInternal.tv_string,0), ), None)
GameService._d_createGameSession = ((), (), None)
GameService._d_createGameDetails = ((), (), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_createRound = (((omniORB.tcInternal.tv_string,0), ), (), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_updateGame = (((omniORB.tcInternal.tv_string,0), ), (), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_updateRound = (((omniORB.tcInternal.tv_string,0), ), (), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_readRoundWord = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_deleteGameSession = ((), (), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})
GameService._d_getRoundId = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), {_0_compilations.GameNotFoundException._NP_RepositoryId: _0_compilations._d_GameNotFoundException})

# GameService object reference
class _objref_GameService (CORBA.Object):
    _NP_RepositoryId = GameService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def requestToJoinGame(self, *args):
        return self._obj.invoke("requestToJoinGame", _0_compilations.GameService._d_requestToJoinGame, args)

    def getCurrentWordMask(self, *args):
        return self._obj.invoke("getCurrentWordMask", _0_compilations.GameService._d_getCurrentWordMask, args)

    def submitLetterGuess(self, *args):
        return self._obj.invoke("submitLetterGuess", _0_compilations.GameService._d_submitLetterGuess, args)

    def getRemainingGuesses(self, *args):
        return self._obj.invoke("getRemainingGuesses", _0_compilations.GameService._d_getRemainingGuesses, args)

    def getGameProgressStatus(self, *args):
        return self._obj.invoke("getGameProgressStatus", _0_compilations.GameService._d_getGameProgressStatus, args)

    def setPlayerDone(self, *args):
        return self._obj.invoke("setPlayerDone", _0_compilations.GameService._d_setPlayerDone, args)

    def getCurrentPlayerCount(self, *args):
        return self._obj.invoke("getCurrentPlayerCount", _0_compilations.GameService._d_getCurrentPlayerCount, args)

    def getAllPlayers(self, *args):
        return self._obj.invoke("getAllPlayers", _0_compilations.GameService._d_getAllPlayers, args)

    def areAllPlayersDone(self, *args):
        return self._obj.invoke("areAllPlayersDone", _0_compilations.GameService._d_areAllPlayersDone, args)

    def advanceToNextRoundIfReady(self, *args):
        return self._obj.invoke("advanceToNextRoundIfReady", _0_compilations.GameService._d_advanceToNextRoundIfReady, args)

    def getAllPlayerScores(self, *args):
        return self._obj.invoke("getAllPlayerScores", _0_compilations.GameService._d_getAllPlayerScores, args)

    def getCurrentRound(self, *args):
        return self._obj.invoke("getCurrentRound", _0_compilations.GameService._d_getCurrentRound, args)

    def isGameOver(self, *args):
        return self._obj.invoke("isGameOver", _0_compilations.GameService._d_isGameOver, args)

    def getWinner(self, *args):
        return self._obj.invoke("getWinner", _0_compilations.GameService._d_getWinner, args)

    def getScoreSummary(self, *args):
        return self._obj.invoke("getScoreSummary", _0_compilations.GameService._d_getScoreSummary, args)

    def createGameSession(self, *args):
        return self._obj.invoke("createGameSession", _0_compilations.GameService._d_createGameSession, args)

    def createGameDetails(self, *args):
        return self._obj.invoke("createGameDetails", _0_compilations.GameService._d_createGameDetails, args)

    def createRound(self, *args):
        return self._obj.invoke("createRound", _0_compilations.GameService._d_createRound, args)

    def updateGame(self, *args):
        return self._obj.invoke("updateGame", _0_compilations.GameService._d_updateGame, args)

    def updateRound(self, *args):
        return self._obj.invoke("updateRound", _0_compilations.GameService._d_updateRound, args)

    def readRoundWord(self, *args):
        return self._obj.invoke("readRoundWord", _0_compilations.GameService._d_readRoundWord, args)

    def deleteGameSession(self, *args):
        return self._obj.invoke("deleteGameSession", _0_compilations.GameService._d_deleteGameSession, args)

    def getRoundId(self, *args):
        return self._obj.invoke("getRoundId", _0_compilations.GameService._d_getRoundId, args)

omniORB.registerObjref(GameService._NP_RepositoryId, _objref_GameService)
_0_compilations._objref_GameService = _objref_GameService
del GameService, _objref_GameService

# GameService skeleton
__name__ = "compilations__POA"
class GameService (PortableServer.Servant):
    _NP_RepositoryId = _0_compilations.GameService._NP_RepositoryId


    _omni_op_d = {"requestToJoinGame": _0_compilations.GameService._d_requestToJoinGame, "getCurrentWordMask": _0_compilations.GameService._d_getCurrentWordMask, "submitLetterGuess": _0_compilations.GameService._d_submitLetterGuess, "getRemainingGuesses": _0_compilations.GameService._d_getRemainingGuesses, "getGameProgressStatus": _0_compilations.GameService._d_getGameProgressStatus, "setPlayerDone": _0_compilations.GameService._d_setPlayerDone, "getCurrentPlayerCount": _0_compilations.GameService._d_getCurrentPlayerCount, "getAllPlayers": _0_compilations.GameService._d_getAllPlayers, "areAllPlayersDone": _0_compilations.GameService._d_areAllPlayersDone, "advanceToNextRoundIfReady": _0_compilations.GameService._d_advanceToNextRoundIfReady, "getAllPlayerScores": _0_compilations.GameService._d_getAllPlayerScores, "getCurrentRound": _0_compilations.GameService._d_getCurrentRound, "isGameOver": _0_compilations.GameService._d_isGameOver, "getWinner": _0_compilations.GameService._d_getWinner, "getScoreSummary": _0_compilations.GameService._d_getScoreSummary, "createGameSession": _0_compilations.GameService._d_createGameSession, "createGameDetails": _0_compilations.GameService._d_createGameDetails, "createRound": _0_compilations.GameService._d_createRound, "updateGame": _0_compilations.GameService._d_updateGame, "updateRound": _0_compilations.GameService._d_updateRound, "readRoundWord": _0_compilations.GameService._d_readRoundWord, "deleteGameSession": _0_compilations.GameService._d_deleteGameSession, "getRoundId": _0_compilations.GameService._d_getRoundId}

GameService._omni_skeleton = GameService
_0_compilations__POA.GameService = GameService
omniORB.registerSkeleton(GameService._NP_RepositoryId, GameService)
del GameService
__name__ = "compilations"

#
# End of module "compilations"
#
__name__ = "GameService_idl"

_exported_modules = ( "compilations", )

# The end.
