# Python stubs generated by omniidl from AdminService.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "compilations"
#
__name__ = "compilations"
_0_compilations = omniORB.openModule("compilations", r"AdminService.idl")
_0_compilations__POA = omniORB.openModule("compilations__POA", r"AdminService.idl")


# exception PlayerAlreadyExistsException
_0_compilations.PlayerAlreadyExistsException = omniORB.newEmptyClass()
class PlayerAlreadyExistsException (CORBA.UserException):
    _NP_RepositoryId = "IDL:compilations/PlayerAlreadyExistsException:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_compilations.PlayerAlreadyExistsException = PlayerAlreadyExistsException
_0_compilations._d_PlayerAlreadyExistsException  = (omniORB.tcInternal.tv_except, PlayerAlreadyExistsException, PlayerAlreadyExistsException._NP_RepositoryId, "PlayerAlreadyExistsException")
_0_compilations._tc_PlayerAlreadyExistsException = omniORB.tcInternal.createTypeCode(_0_compilations._d_PlayerAlreadyExistsException)
omniORB.registerType(PlayerAlreadyExistsException._NP_RepositoryId, _0_compilations._d_PlayerAlreadyExistsException, _0_compilations._tc_PlayerAlreadyExistsException)
del PlayerAlreadyExistsException

# exception PlayerNotFoundException
_0_compilations.PlayerNotFoundException = omniORB.newEmptyClass()
class PlayerNotFoundException (CORBA.UserException):
    _NP_RepositoryId = "IDL:compilations/PlayerNotFoundException:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_compilations.PlayerNotFoundException = PlayerNotFoundException
_0_compilations._d_PlayerNotFoundException  = (omniORB.tcInternal.tv_except, PlayerNotFoundException, PlayerNotFoundException._NP_RepositoryId, "PlayerNotFoundException")
_0_compilations._tc_PlayerNotFoundException = omniORB.tcInternal.createTypeCode(_0_compilations._d_PlayerNotFoundException)
omniORB.registerType(PlayerNotFoundException._NP_RepositoryId, _0_compilations._d_PlayerNotFoundException, _0_compilations._tc_PlayerNotFoundException)
del PlayerNotFoundException

# struct PlayerAccount
_0_compilations.PlayerAccount = omniORB.newEmptyClass()
class PlayerAccount (omniORB.StructBase):
    _NP_RepositoryId = "IDL:compilations/PlayerAccount:1.0"

    def __init__(self, playerId, username, password, gamesWon, loggedIn):
        self.playerId = playerId
        self.username = username
        self.password = password
        self.gamesWon = gamesWon
        self.loggedIn = loggedIn

_0_compilations.PlayerAccount = PlayerAccount
_0_compilations._d_PlayerAccount  = (omniORB.tcInternal.tv_struct, PlayerAccount, PlayerAccount._NP_RepositoryId, "PlayerAccount", "playerId", omniORB.tcInternal.tv_long, "username", (omniORB.tcInternal.tv_string,0), "password", (omniORB.tcInternal.tv_string,0), "gamesWon", omniORB.tcInternal.tv_short, "loggedIn", omniORB.tcInternal.tv_boolean)
_0_compilations._tc_PlayerAccount = omniORB.tcInternal.createTypeCode(_0_compilations._d_PlayerAccount)
omniORB.registerType(PlayerAccount._NP_RepositoryId, _0_compilations._d_PlayerAccount, _0_compilations._tc_PlayerAccount)
del PlayerAccount

# struct GameConfiguration
_0_compilations.GameConfiguration = omniORB.newEmptyClass()
class GameConfiguration (omniORB.StructBase):
    _NP_RepositoryId = "IDL:compilations/GameConfiguration:1.0"

    def __init__(self, waitTime, roundDuration):
        self.waitTime = waitTime
        self.roundDuration = roundDuration

_0_compilations.GameConfiguration = GameConfiguration
_0_compilations._d_GameConfiguration  = (omniORB.tcInternal.tv_struct, GameConfiguration, GameConfiguration._NP_RepositoryId, "GameConfiguration", "waitTime", omniORB.tcInternal.tv_short, "roundDuration", omniORB.tcInternal.tv_short)
_0_compilations._tc_GameConfiguration = omniORB.tcInternal.createTypeCode(_0_compilations._d_GameConfiguration)
omniORB.registerType(GameConfiguration._NP_RepositoryId, _0_compilations._d_GameConfiguration, _0_compilations._tc_GameConfiguration)
del GameConfiguration

# struct GameSessionObject
_0_compilations.GameSessionObject = omniORB.newEmptyClass()
class GameSessionObject (omniORB.StructBase):
    _NP_RepositoryId = "IDL:compilations/GameSessionObject:1.0"

    def __init__(self, gameId, timeCreated, status):
        self.gameId = gameId
        self.timeCreated = timeCreated
        self.status = status

_0_compilations.GameSessionObject = GameSessionObject
_0_compilations._d_GameSessionObject  = (omniORB.tcInternal.tv_struct, GameSessionObject, GameSessionObject._NP_RepositoryId, "GameSessionObject", "gameId", (omniORB.tcInternal.tv_string,0), "timeCreated", (omniORB.tcInternal.tv_string,0), "status", (omniORB.tcInternal.tv_string,0))
_0_compilations._tc_GameSessionObject = omniORB.tcInternal.createTypeCode(_0_compilations._d_GameSessionObject)
omniORB.registerType(GameSessionObject._NP_RepositoryId, _0_compilations._d_GameSessionObject, _0_compilations._tc_GameSessionObject)
del GameSessionObject

# typedef ... PlayerAccountSeq
class PlayerAccountSeq:
    _NP_RepositoryId = "IDL:compilations/PlayerAccountSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_compilations.PlayerAccountSeq = PlayerAccountSeq
_0_compilations._d_PlayerAccountSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:compilations/PlayerAccount:1.0"], 0)
_0_compilations._ad_PlayerAccountSeq = (omniORB.tcInternal.tv_alias, PlayerAccountSeq._NP_RepositoryId, "PlayerAccountSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:compilations/PlayerAccount:1.0"], 0))
_0_compilations._tc_PlayerAccountSeq = omniORB.tcInternal.createTypeCode(_0_compilations._ad_PlayerAccountSeq)
omniORB.registerType(PlayerAccountSeq._NP_RepositoryId, _0_compilations._ad_PlayerAccountSeq, _0_compilations._tc_PlayerAccountSeq)
del PlayerAccountSeq

# typedef ... GameSessionSequence
class GameSessionSequence:
    _NP_RepositoryId = "IDL:compilations/GameSessionSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_compilations.GameSessionSequence = GameSessionSequence
_0_compilations._d_GameSessionSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:compilations/GameSessionObject:1.0"], 0)
_0_compilations._ad_GameSessionSequence = (omniORB.tcInternal.tv_alias, GameSessionSequence._NP_RepositoryId, "GameSessionSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:compilations/GameSessionObject:1.0"], 0))
_0_compilations._tc_GameSessionSequence = omniORB.tcInternal.createTypeCode(_0_compilations._ad_GameSessionSequence)
omniORB.registerType(GameSessionSequence._NP_RepositoryId, _0_compilations._ad_GameSessionSequence, _0_compilations._tc_GameSessionSequence)
del GameSessionSequence

# interface AdminService
_0_compilations._d_AdminService = (omniORB.tcInternal.tv_objref, "IDL:compilations/AdminService:1.0", "AdminService")
omniORB.typeMapping["IDL:compilations/AdminService:1.0"] = _0_compilations._d_AdminService
_0_compilations.AdminService = omniORB.newEmptyClass()
class AdminService :
    _NP_RepositoryId = _0_compilations._d_AdminService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_compilations.AdminService = AdminService
_0_compilations._tc_AdminService = omniORB.tcInternal.createTypeCode(_0_compilations._d_AdminService)
omniORB.registerType(AdminService._NP_RepositoryId, _0_compilations._d_AdminService, _0_compilations._tc_AdminService)

# AdminService operations and attributes
AdminService._d_createPlayerAccount = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_compilations.PlayerAlreadyExistsException._NP_RepositoryId: _0_compilations._d_PlayerAlreadyExistsException})
AdminService._d_removePlayerAccount = (((omniORB.tcInternal.tv_string,0), ), (), {_0_compilations.PlayerNotFoundException._NP_RepositoryId: _0_compilations._d_PlayerNotFoundException})
AdminService._d_updatePlayerCredentials = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_compilations.PlayerNotFoundException._NP_RepositoryId: _0_compilations._d_PlayerNotFoundException, _0_compilations.PlayerAlreadyExistsException._NP_RepositoryId: _0_compilations._d_PlayerAlreadyExistsException})
AdminService._d_searchPlayerAccounts = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:compilations/PlayerAccountSeq:1.0"], ), None)
AdminService._d_updateGameWaitTime = ((omniORB.tcInternal.tv_short, ), (), None)
AdminService._d_updateRoundDuration = ((omniORB.tcInternal.tv_short, ), (), None)
AdminService._d_getJoinTimeout = ((), (omniORB.tcInternal.tv_short, ), None)
AdminService._d_getRoundDuration = ((), (omniORB.tcInternal.tv_short, ), None)
AdminService._d_getGameHistory = ((), (omniORB.typeMapping["IDL:compilations/GameSessionSequence:1.0"], ), None)

# AdminService object reference
class _objref_AdminService (CORBA.Object):
    _NP_RepositoryId = AdminService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def createPlayerAccount(self, *args):
        return self._obj.invoke("createPlayerAccount", _0_compilations.AdminService._d_createPlayerAccount, args)

    def removePlayerAccount(self, *args):
        return self._obj.invoke("removePlayerAccount", _0_compilations.AdminService._d_removePlayerAccount, args)

    def updatePlayerCredentials(self, *args):
        return self._obj.invoke("updatePlayerCredentials", _0_compilations.AdminService._d_updatePlayerCredentials, args)

    def searchPlayerAccounts(self, *args):
        return self._obj.invoke("searchPlayerAccounts", _0_compilations.AdminService._d_searchPlayerAccounts, args)

    def updateGameWaitTime(self, *args):
        return self._obj.invoke("updateGameWaitTime", _0_compilations.AdminService._d_updateGameWaitTime, args)

    def updateRoundDuration(self, *args):
        return self._obj.invoke("updateRoundDuration", _0_compilations.AdminService._d_updateRoundDuration, args)

    def getJoinTimeout(self, *args):
        return self._obj.invoke("getJoinTimeout", _0_compilations.AdminService._d_getJoinTimeout, args)

    def getRoundDuration(self, *args):
        return self._obj.invoke("getRoundDuration", _0_compilations.AdminService._d_getRoundDuration, args)

    def getGameHistory(self, *args):
        return self._obj.invoke("getGameHistory", _0_compilations.AdminService._d_getGameHistory, args)

omniORB.registerObjref(AdminService._NP_RepositoryId, _objref_AdminService)
_0_compilations._objref_AdminService = _objref_AdminService
del AdminService, _objref_AdminService

# AdminService skeleton
__name__ = "compilations__POA"
class AdminService (PortableServer.Servant):
    _NP_RepositoryId = _0_compilations.AdminService._NP_RepositoryId


    _omni_op_d = {"createPlayerAccount": _0_compilations.AdminService._d_createPlayerAccount, "removePlayerAccount": _0_compilations.AdminService._d_removePlayerAccount, "updatePlayerCredentials": _0_compilations.AdminService._d_updatePlayerCredentials, "searchPlayerAccounts": _0_compilations.AdminService._d_searchPlayerAccounts, "updateGameWaitTime": _0_compilations.AdminService._d_updateGameWaitTime, "updateRoundDuration": _0_compilations.AdminService._d_updateRoundDuration, "getJoinTimeout": _0_compilations.AdminService._d_getJoinTimeout, "getRoundDuration": _0_compilations.AdminService._d_getRoundDuration, "getGameHistory": _0_compilations.AdminService._d_getGameHistory}

AdminService._omni_skeleton = AdminService
_0_compilations__POA.AdminService = AdminService
omniORB.registerSkeleton(AdminService._NP_RepositoryId, AdminService)
del AdminService
__name__ = "compilations"

#
# End of module "compilations"
#
__name__ = "AdminService_idl"

_exported_modules = ( "compilations", )

# The end.
